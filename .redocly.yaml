extends:
  - minimal

rules:

  # Verifies the description is declared.
  info-description: warn

  # Verifies the info contact object is present and correctly structured.
  info-contact: off

  # Verifies the license is declared.
  info-license: off

  # Verifies the license URL is declared.
  info-license-url: off

  # Verifies that each tag has a description.
  tag-description: warn

  # Verifies that tags (names) are declared in alphabetical order.
  tags-alphabetical: warn

  # Verifies that each parameter has a description.
  parameter-description: warn

  # Path parameter declarations cannot be empty, ex. /given/{}is invalid.
  path-declaration-must-exist: error

  # Don't put query string items in the path, they belong in parameters with in: query.
  path-not-include-query: error

  # Verifies the path parameters are defined.
  path-parameters-defined: error

  # Verifies each operation has a description.
  operation-description: warn

  #Ensures that every operation with (400-499) HTTP response has content-type application/problem+json and fields title and type.
  operation-4xx-problem-details-rfc7807: error

  # Verifies that paths are not identical including templated paths.
  no-identical-paths: error

  # Verifies that paths are not ambiguous as defined in the spec:
  # The following may lead to ambiguous resolution:
  #  /{entity}/me
  #  /books/{id}
  no-ambiguous-paths: error

  # Keep trailing slashes off of paths, as it can cause some confusion.
  # Some web tooling (like mock servers, real servers, code generators, application frameworks, etc.)
  # will treat example.com/foo and example.com/foo/ as the same thing, but other tooling will not.
  # Avoid any confusion by just documenting them without the slash, and maybe some tooling will let people
  #shove a / on there when they're using it or maybe not, but at least the docs are suggesting how it should be done properly.
  no-path-trailing-slash: error

  # Operation must have at least one 2xx response. Any API operation (endpoint)
  # can fail but presumably it is also meant to do something constructive at some point.
  # If you forget to write out a success case for this API, then this rule will let you know.
  operation-2xx-response: error

  # Every operation must have an operationId defined. Useful in the docs for deep-linking.
  # Useful elsewhere by having a common ID to refer to any operation.
  operation-operationId: error

  # Verifies each operation has a summary. Operation summaries are used to generate API docs.
  operation-summary: error

  # Every operation must have a unique operationId.
  # Why? A lot of documentation systems use this as an identifier,
  # some SDK generators convert them to a method name, and all sorts of things like that.
  operation-operationId-unique: error

  # Seeing as operationId is often used for unique URLs in documentation systems,
  # it's a good idea to avoid non-URL safe characters.
  operation-operationId-url-safe: error

  # Verifies parameters are unique for any given operation.
  operation-parameters-unique: error

  # Operation tags should be defined in global tags.
  operation-tag-defined: error

  # Operation security values must match a scheme defined in the components.securitySchemes object.
  security-defined: off

  # Use just one tag for an operation, which is helpful for some documentation systems which use tags to avoid duplicate content.
  operation-singular-tag: off

  # Resolves all refs.
  no-unresolved-refs: error

  # Enum values should respect the type specifier.
  no-enum-type-mismatch: error

  # name fields of Parameters with type boolean should have a is or has prefix.
  # You can specify different prefixes.
  boolean-parameter-prefixes:
    severity: error
    prefixes: ['should', 'is', 'has']

  # All path items should be in kebab-case.
  paths-kebab-case: error

  # Validate against the declared OpenAPI specification (currently supports version 2 and 3.0).
  spec: error

  # Requires that specific objects inside components MUST use keys that match the regular expression: ^[a-zA-Z0-9\.\-_]+$.
  spec-components-invalid-map-name: error

  # Verifies media type examples comply with the defined schema.
  # Disallows additional properties by default. Adjust that behavior in configuration
  no-invalid-media-type-examples:
    severity: off # Rule is off as it creates warnings on valid examples.
    disallowAdditionalProperties: false

  # Server URL should not point to example.com.
  no-server-example.com: warn

  # Server URL should not have a trailing slash.
  # Some tooling forgets to strip trailing slashes off when it's joined
  # with the servers.url with paths, and you can get awkward URLs like https://example.com/api//pets.
  # This rule will remind you to strip them off yourself.
  no-server-trailing-slash: error

  # Empty servers defaults to localhost. This rule verifies the servers have been defined.
  no-empty-servers: off

  # Examples for requestBody or response examples can have an externalValue
  # or a value, but they cannot have both.
  no-example-value-and-externalValue: error

  # Verifies there are no unused components.
  # Note, it does not verify there aren't unused files.
  no-unused-components: warn

  # Verifies that server variables are defined
  no-undefined-server-variable: error
