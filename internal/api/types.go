// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package api

import (
	"encoding/json"
	"fmt"
	"time"
)

// InfoContributor defines model for InfoContributor.
type InfoContributor struct {
	// Contributor name as found in git commits
	Username *string `json:"username,omitempty"`
}

// Problem resource as defined per [RFC7807](https://www.rfc-editor.org/rfc/rfc7807)
type Problem struct {
	// A human-readable explanation specific to this occurrence of the problem.
	Detail *string `json:"detail,omitempty"`

	// A URI reference that identifies the specific occurrence of the problem, e.g. by adding a fragment identifier or sub-path to the problem type. May be used to locate the root of this problem in the source code.
	Instance *string `json:"instance,omitempty"`

	// The HTTP status code generated by the origin server for this occurrence of the problem.
	Status *int32 `json:"status,omitempty"`

	// A short, human-readable summary of the problem type. It SHOULD NOT change from occurrence to occurrence of the problem.
	Title *string `json:"title,omitempty"`

	// A URI reference [RFC3986](https://www.rfc-editor.org/rfc/rfc3986) that identifies the problem type.
	// When dereferenced using Kadok's API baseUri (e.g., `<baseUri><type>` with `baseUri=https://kadok.io/api`).
	// When this member is not present, its value is assumed to be "about:blank".
	Type                 *string                `json:"type,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// Problem resource as defined per [RFC7807](https://www.rfc-editor.org/rfc/rfc7807)
type ErrorResponse500 = Problem

// GetWellKnownInfoResponse200 defines model for GetWellKnownInfoResponse200.
type GetWellKnownInfoResponse200 struct {
	// UTC Date & Time when Kadok was compiled.
	// Follows [RFC3339 Section 5.6](https://datatracker.ietf.org/doc/html/rfc3339#section-5.6) that itself relies on [ISO8601](https://www.iso.org/iso-8601-date-and-time-format.html)
	BuildDate *time.Time `json:"buildDate,omitempty"`

	// Kadok contributors information
	Contributors *[]InfoContributor `json:"contributors,omitempty"`

	// Useful if you are looking for the source code exposing the API
	GitCommit *string `json:"gitCommit,omitempty"`

	// Version of go used to build Kadok
	GoVersion *string `json:"goVersion,omitempty"`

	// Name of the license under which Kadok is distributed
	LicenseName *string `json:"licenseName,omitempty"`

	// Url of the license
	LicenseURL *string `json:"licenseURL,omitempty"`

	// Url to Kadok project
	Url *string `json:"url,omitempty"`

	// Version number of Kadok implementation
	Version *string `json:"version,omitempty"`
}

// GetWellKnownResponse200 defines model for GetWellKnownResponse200.
type GetWellKnownResponse200 struct {
	// Url to the endpoint providing information about the API Provider
	Info *string `json:"info,omitempty"`
}

// Getter for additional properties for Problem. Returns the specified
// element and whether it was found
func (a Problem) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for Problem
func (a *Problem) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for Problem to handle AdditionalProperties
func (a *Problem) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["detail"]; found {
		err = json.Unmarshal(raw, &a.Detail)
		if err != nil {
			return fmt.Errorf("error reading 'detail': %w", err)
		}
		delete(object, "detail")
	}

	if raw, found := object["instance"]; found {
		err = json.Unmarshal(raw, &a.Instance)
		if err != nil {
			return fmt.Errorf("error reading 'instance': %w", err)
		}
		delete(object, "instance")
	}

	if raw, found := object["status"]; found {
		err = json.Unmarshal(raw, &a.Status)
		if err != nil {
			return fmt.Errorf("error reading 'status': %w", err)
		}
		delete(object, "status")
	}

	if raw, found := object["title"]; found {
		err = json.Unmarshal(raw, &a.Title)
		if err != nil {
			return fmt.Errorf("error reading 'title': %w", err)
		}
		delete(object, "title")
	}

	if raw, found := object["type"]; found {
		err = json.Unmarshal(raw, &a.Type)
		if err != nil {
			return fmt.Errorf("error reading 'type': %w", err)
		}
		delete(object, "type")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for Problem to handle AdditionalProperties
func (a Problem) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.Detail != nil {
		object["detail"], err = json.Marshal(a.Detail)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'detail': %w", err)
		}
	}

	if a.Instance != nil {
		object["instance"], err = json.Marshal(a.Instance)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'instance': %w", err)
		}
	}

	if a.Status != nil {
		object["status"], err = json.Marshal(a.Status)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'status': %w", err)
		}
	}

	if a.Title != nil {
		object["title"], err = json.Marshal(a.Title)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'title': %w", err)
		}
	}

	if a.Type != nil {
		object["type"], err = json.Marshal(a.Type)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'type': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}
