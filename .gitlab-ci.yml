stages:
  - test
  - delivery
  - deploy

variables:
  IMAGE_TAG: "snapshot"

workflow:
  rules:
    - if: '$CI_COMMIT_TAG != null'
      when: never
    - if: '$CI_PIPELINE_SOURCE != "merge_request_event" &&  $CI_COMMIT_BRANCH != $CI_DEFAULT_BRANCH'
      when: never
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      variables:
        IMAGE_TAG: merge-$CI_MERGE_REQUEST_ID
        KADOK_ENV: staging
    - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH'
      variables:
        IMAGE_TAG: $CI_COMMIT_SHORT_SHA
        KADOK_ENV: production

test_code:
  stage: test
  image: golang:1.17
  rules:
    - changes:
      - "*.go"
      - go.mod
      - go.sum
  script:
    - go install github.com/t-yuki/gocover-cobertura@latest
    - go install github.com/jstemmer/go-junit-report@latest
    - go install github.com/kyoh86/richgo@latest
    - >
      go test -v -cover -covermode="count"
      -coverprofile=coverage.txt ./... |
      bash -c 'tee >(RICHGO_FORCE_COLOR=1 richgo testfilter > /dev/stderr)' |
      go-junit-report -set-exit-code > junit.xml
    - gocover-cobertura < coverage.txt > coverage.xml
    # The following line are required for gitlab to detect the covreage based on its regex match.
    # The regex being evaluated by gitlab is: coverage: \d+.\d+% of statements
    - >
      COVERAGE=$(go tool cover -func coverage.txt | grep total: | sed -e "s/\t//g" | sed -n -E 's/^.*\)([0-9]+\.[0-9]+)%$/\1/p')
    - >
      echo "coverage: $(printf '%.1f' "${COVERAGE}")% of statements"
  coverage: /^coverage:\s(\d+(?:\.\d+)?%)/
  artifacts:
    when: always
    name: $CI_JOB_NAME/coverage.txt
    paths:
      - coverage.xml
      - junit.xml
    reports:
      cobertura: coverage.xml
      junit: junit.xml

test_chart:
  stage: test
  image: devth/helm:latest
  environment:
    action: prepare
    name: kadok-staging
  rules:
    - changes:
      - charts/**/*
  script:
    - >
      helm lint
      --set image.repository=$CI_REGISTRY_IMAGE
      --set image.tag=$IMAGE_TAG
      --set 'podAnnotations.app\.gitlab\.com/env=${CI_ENVIRONMENT_SLUG}'
      --set 'podAnnotations.app\.gitlab\.com/app=${CI_PROJECT_PATH_SLUG}'
      --set imagePullSecrets[0].name=regcred-kadok
      --set registrySecret.create=true
      --set registrySecret.registry=$CI_REGISTRY
      --set registrySecret.password=$REGISTRY_TOKEN
      --set kadok.token=$DISCORD_TOKEN
      charts/kadok

delivery_image:
  stage: delivery
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [""]
  script:
    - mkdir -p /kaniko/.docker
    - echo "{\"auths\":{\"$CI_REGISTRY\":{\"auth\":\"$(echo -n ${CI_REGISTRY_USER}:${CI_REGISTRY_PASSWORD} | base64)\"}}}" > /kaniko/.docker/config.json
    - >
      /kaniko/executor
      --context $CI_PROJECT_DIR
      --dockerfile $CI_PROJECT_DIR/dockerfile
      --destination $CI_REGISTRY_IMAGE:$IMAGE_TAG
      --build-arg=BUILD_VERSION=$IMAGE_TAG
      --build-arg=GIT_COMMIT=$CI_COMMIT_SHA

deploy_kadok:
  stage: deploy
  image: devth/helm:latest
  environment:
    name: $KADOK_ENV
    kubernetes:
      namespace: kadok-$KADOK_ENV
  script:
    - >
      helm upgrade
      --install
      --cleanup-on-fail
      --atomic
      --create-namespace
      --namespace $KUBE_NAMESPACE
      --set image.repository=$CI_REGISTRY_IMAGE
      --set image.tag=$IMAGE_TAG
      --set gitlab.env=${CI_ENVIRONMENT_SLUG}
      --set gitlab.app=${CI_PROJECT_PATH_SLUG}
      --set imagePullSecrets[0].name=regcred-kadok
      --set registrySecret.create=true
      --set registrySecret.registry=$CI_REGISTRY
      --set registrySecret.password=$REGISTRY_TOKEN
      --set kadok.token=$DISCORD_TOKEN
      kadok-$KADOK_ENV
      charts/kadok
