stages:
  - test
  - delivery

variables:
  IMAGE_TAG: "snapshot"

workflow:
  rules:
    - if: $CI_MERGE_REQUEST_ID != null
      variables:
        IMAGE_TAG: merge-$CI_MERGE_REQUEST_ID
    - if: $CI_COMMIT_TAG != null
      variables:
        IMAGE_TAG: $CI_COMMIT_TAG
    - if: $CI_COMMIT_BRANCH == "main"
      variables:
        IMAGE_TAG: $CI_COMMIT_SHORT_SHA

test:
  stage: test
  image: golang:1.17
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
  script:
    - go install github.com/t-yuki/gocover-cobertura@latest
    - go install github.com/jstemmer/go-junit-report@latest
    - go install github.com/kyoh86/richgo@latest
    - >
      go test -v -cover -covermode="count"
      -coverprofile=coverage.txt ./... |
      bash -c 'tee >(RICHGO_FORCE_COLOR=1 richgo testfilter > /dev/stderr)' |
      go-junit-report -set-exit-code > junit.xml
    - gocover-cobertura < coverage.txt > coverage.xml
    # The following line are required for gitlab to detect the covreage based on its regex match.
    # The regex being evaluated by gitlab is: coverage: \d+.\d+% of statements
    - >
      COVERAGE=$(go tool cover -func coverage.txt | grep total: | sed -e "s/\t//g" | sed -n -E 's/^.*\)([0-9]+\.[0-9]+)%$/\1/p')
    - >
      echo "coverage: $(printf '%.1f' "${COVERAGE}")% of statements"
  coverage: /^coverage:\s(\d+(?:\.\d+)?%)/
  artifacts:
    when: always
    name: $CI_JOB_NAME/coverage.txt
    paths:
      - coverage.xml
      - junit.xml
    reports:
      cobertura: coverage.xml
      junit: junit.xml

delivery:
  stage: delivery
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [""]
  script:
    - mkdir -p /kaniko/.docker
    - echo "{\"auths\":{\"$CI_REGISTRY\":{\"auth\":\"$(echo -n ${CI_REGISTRY_USER}:${CI_REGISTRY_PASSWORD} | base64)\"}}}" > /kaniko/.docker/config.json
    - >
      /kaniko/executor
      --context $CI_PROJECT_DIR
      --dockerfile $CI_PROJECT_DIR/dockerfile
      --destination $CI_REGISTRY_IMAGE:$IMAGE_TAG
      --build-arg=BUILD_VERSION=$IMAGE_TAG
      --build-arg=GIT_COMMIT=$CI_COMMIT_SHA

        